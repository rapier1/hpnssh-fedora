Index: hpnssh-8.8p1_hpn16v1/addr.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/addr.c
+++ hpnssh-8.8p1_hpn16v1/addr.c
@@ -312,8 +312,10 @@ addr_pton(const char *p, struct xaddr *n
 	if (p == NULL || getaddrinfo(p, NULL, &hints, &ai) != 0)
 		return -1;
 
-	if (ai == NULL || ai->ai_addr == NULL)
+	if (ai == NULL || ai->ai_addr == NULL) {
+		freeaddrinfo(ai);
 		return -1;
+	}
 
 	if (n != NULL && addr_sa_to_xaddr(ai->ai_addr, ai->ai_addrlen,
 	    n) == -1) {
@@ -336,12 +338,16 @@ addr_sa_pton(const char *h, const char *
 	if (h == NULL || getaddrinfo(h, s, &hints, &ai) != 0)
 		return -1;
 
-	if (ai == NULL || ai->ai_addr == NULL)
+	if (ai == NULL || ai->ai_addr == NULL) {
+		freeaddrinfo(ai);
 		return -1;
+	}
 
 	if (sa != NULL) {
-		if (slen < ai->ai_addrlen)
+		if (slen < ai->ai_addrlen) {
+			freeaddrinfo(ai);
 			return -1;
+		}
 		memcpy(sa, &ai->ai_addr, ai->ai_addrlen);
 	}
 
Index: hpnssh-8.8p1_hpn16v1/auth-krb5.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/auth-krb5.c
+++ hpnssh-8.8p1_hpn16v1/auth-krb5.c
@@ -426,6 +426,7 @@ ssh_krb5_cc_new_unique(krb5_context ctx,
 		umask(old_umask);
 		if (tmpfd == -1) {
 			logit("mkstemp(): %.100s", strerror(oerrno));
+			free(ccname);
 			return oerrno;
 		}
 
@@ -433,6 +434,7 @@ ssh_krb5_cc_new_unique(krb5_context ctx,
 			oerrno = errno;
 			logit("fchmod(): %.100s", strerror(oerrno));
 			close(tmpfd);
+			free(ccname);
 			return oerrno;
 		}
 		/* make sure the KRB5CCNAME is set for non-standard location */
Index: hpnssh-8.8p1_hpn16v1/auth-options.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/auth-options.c
+++ hpnssh-8.8p1_hpn16v1/auth-options.c
@@ -723,6 +723,7 @@ serialise_array(struct sshbuf *m, char *
 		return r;
 	}
 	/* success */
+	sshbuf_free(b);
 	return 0;
 }
 
Index: hpnssh-8.8p1_hpn16v1/channels.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/channels.c
+++ hpnssh-8.8p1_hpn16v1/channels.c
@@ -1930,7 +1930,7 @@ channel_post_connecting(struct ssh *ssh,
 		debug("channel %d: connection failed: %s",
 		    c->self, strerror(err));
 		/* Try next address, if any */
-		if ((sock = connect_next(&c->connect_ctx)) > 0) {
+		if ((sock = connect_next(&c->connect_ctx)) >= 0) {
 			close(c->sock);
 			c->sock = c->rfd = c->wfd = sock;
 			channel_find_maxfd(ssh->chanctxt);
@@ -3877,7 +3877,7 @@ int
 channel_request_remote_forwarding(struct ssh *ssh, struct Forward *fwd)
 {
 	int r, success = 0, idx = -1;
-	char *host_to_connect, *listen_host, *listen_path;
+	char *host_to_connect = NULL, *listen_host = NULL, *listen_path = NULL;
 	int port_to_connect, listen_port;
 
 	/* Send the forward request to the remote side. */
@@ -3905,7 +3905,6 @@ channel_request_remote_forwarding(struct
 	success = 1;
 	if (success) {
 		/* Record that connection to this host/port is permitted. */
-		host_to_connect = listen_host = listen_path = NULL;
 		port_to_connect = listen_port = 0;
 		if (fwd->connect_path != NULL) {
 			host_to_connect = xstrdup(fwd->connect_path);
@@ -3926,6 +3925,9 @@ channel_request_remote_forwarding(struct
 		    host_to_connect, port_to_connect,
 		    listen_host, listen_path, listen_port, NULL);
 	}
+	free(host_to_connect);
+	free(listen_host);
+	free(listen_path);
 	return idx;
 }
 
Index: hpnssh-8.8p1_hpn16v1/compat.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/compat.c
+++ hpnssh-8.8p1_hpn16v1/compat.c
@@ -202,10 +202,12 @@ compat_kex_proposal(struct ssh *ssh, cha
 		return p;
 	debug2_f("original KEX proposal: %s", p);
 	if ((ssh->compat & SSH_BUG_CURVE25519PAD) != 0)
+		/* coverity[overwrite_var : FALSE] */
 		if ((p = match_filter_denylist(p,
 		    "curve25519-sha256@libssh.org")) == NULL)
 			fatal("match_filter_denylist failed");
 	if ((ssh->compat & SSH_OLD_DHGEX) != 0) {
+		/* coverity[overwrite_var : FALSE] */
 		if ((p = match_filter_denylist(p,
 		    "diffie-hellman-group-exchange-sha256,"
 		    "diffie-hellman-group-exchange-sha1")) == NULL)
Index: hpnssh-8.8p1_hpn16v1/dns.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/dns.c
+++ hpnssh-8.8p1_hpn16v1/dns.c
@@ -259,6 +259,7 @@ verify_host_key_dns(const char *hostname
 		    &hostkey_digest, &hostkey_digest_len, hostkey)) {
 			error("Error calculating key fingerprint.");
 			freerrset(fingerprints);
+			free(dnskey_digest);
 			return -1;
 		}
 
Index: hpnssh-8.8p1_hpn16v1/gss-genr.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/gss-genr.c
+++ hpnssh-8.8p1_hpn16v1/gss-genr.c
@@ -167,8 +167,9 @@ ssh_gssapi_kex_mechs(gss_OID_set gss_sup
 			enclen = __b64_ntop(digest,
 			    ssh_digest_bytes(SSH_DIGEST_MD5), encoded,
 			    ssh_digest_bytes(SSH_DIGEST_MD5) * 2);
-
+#pragma GCC diagnostic ignored "-Wstringop-overflow"
 			cp = strncpy(s, kex, strlen(kex));
+#pragma pop
 			for ((p = strsep(&cp, ",")); p && *p != '\0';
 				(p = strsep(&cp, ","))) {
 				if (sshbuf_len(buf) != 0 &&
Index: hpnssh-8.8p1_hpn16v1/kexgssc.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/kexgssc.c
+++ hpnssh-8.8p1_hpn16v1/kexgssc.c
@@ -98,8 +98,10 @@ kexgss_client(struct ssh *ssh)
 	default:
 		fatal_f("Unexpected KEX type %d", kex->kex_type);
 	}
-	if (r != 0)
+	if (r != 0) {
+		ssh_gssapi_delete_ctx(&ctxt);
 		return r;
+	}
 
 	token_ptr = GSS_C_NO_BUFFER;
 
Index: hpnssh-8.8p1_hpn16v1/krl.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/krl.c
+++ hpnssh-8.8p1_hpn16v1/krl.c
@@ -1209,6 +1209,7 @@ ssh_krl_from_blob(struct sshbuf *buf, st
 	sshkey_free(key);
 	sshbuf_free(copy);
 	sshbuf_free(sect);
+	/* coverity[leaked_storage : FALSE] */
 	return r;
 }
 
@@ -1261,6 +1262,7 @@ is_key_revoked(struct ssh_krl *krl, cons
 		return r;
 	erb = RB_FIND(revoked_blob_tree, &krl->revoked_sha1s, &rb);
 	free(rb.blob);
+	rb.blob = NULL; /* make coverity happy */
 	if (erb != NULL) {
 		KRL_DBG(("revoked by key SHA1"));
 		return SSH_ERR_KEY_REVOKED;
@@ -1271,6 +1273,7 @@ is_key_revoked(struct ssh_krl *krl, cons
 		return r;
 	erb = RB_FIND(revoked_blob_tree, &krl->revoked_sha256s, &rb);
 	free(rb.blob);
+	rb.blob = NULL; /* make coverity happy */
 	if (erb != NULL) {
 		KRL_DBG(("revoked by key SHA256"));
 		return SSH_ERR_KEY_REVOKED;
@@ -1282,6 +1285,7 @@ is_key_revoked(struct ssh_krl *krl, cons
 		return r;
 	erb = RB_FIND(revoked_blob_tree, &krl->revoked_keys, &rb);
 	free(rb.blob);
+	rb.blob = NULL; /* make coverity happy */
 	if (erb != NULL) {
 		KRL_DBG(("revoked by explicit key"));
 		return SSH_ERR_KEY_REVOKED;
Index: hpnssh-8.8p1_hpn16v1/loginrec.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/loginrec.c
+++ hpnssh-8.8p1_hpn16v1/loginrec.c
@@ -690,9 +690,11 @@ construct_utmp(struct logininfo *li,
 	 */
 
 	/* Use strncpy because we don't necessarily want null termination */
+	/* coverity[buffer_size_warning : FALSE] */
 	strncpy(ut->ut_name, li->username,
 	    MIN_SIZEOF(ut->ut_name, li->username));
 # ifdef HAVE_HOST_IN_UTMP
+	/* coverity[buffer_size_warning : FALSE] */
 	strncpy(ut->ut_host, li->hostname,
 	    MIN_SIZEOF(ut->ut_host, li->hostname));
 # endif
@@ -1690,6 +1692,7 @@ record_failed_login(struct ssh *ssh, con
 
 	memset(&ut, 0, sizeof(ut));
 	/* strncpy because we don't necessarily want nul termination */
+	/* coverity[buffer_size_warning : FALSE] */
 	strncpy(ut.ut_user, username, sizeof(ut.ut_user));
 	strlcpy(ut.ut_line, "ssh:notty", sizeof(ut.ut_line));
 
@@ -1699,6 +1702,7 @@ record_failed_login(struct ssh *ssh, con
 	ut.ut_pid = getpid();
 
 	/* strncpy because we don't necessarily want nul termination */
+	/* coverity[buffer_size_warning : FALSE] */
 	strncpy(ut.ut_host, hostname, sizeof(ut.ut_host));
 
 	if (ssh_packet_connection_is_on_socket(ssh) &&
Index: hpnssh-8.8p1_hpn16v1/misc.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/misc.c
+++ hpnssh-8.8p1_hpn16v1/misc.c
@@ -1461,6 +1461,8 @@ sanitise_stdfd(void)
 	}
 	if (nullfd > STDERR_FILENO)
 		close(nullfd);
+	/* coverity[leaked_handle : FALSE]*/
+	/* coverity[leaked_handle : FALSE]*/
 }
 
 char *
@@ -2578,6 +2580,7 @@ stdfd_devnull(int do_stdin, int do_stdou
 	}
 	if (devnull > STDERR_FILENO)
 		close(devnull);
+	/* coverity[leaked_handle : FALSE]*/
 	return ret;
 }
 
Index: hpnssh-8.8p1_hpn16v1/moduli.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/moduli.c
+++ hpnssh-8.8p1_hpn16v1/moduli.c
@@ -476,6 +476,7 @@ write_checkpoint(char *cpfile, u_int32_t
 	else
 		logit("failed to write to checkpoint file '%s': %s", cpfile,
 		    strerror(errno));
+	/* coverity[leaked_storage : FALSE] */
 }
 
 static unsigned long
Index: hpnssh-8.8p1_hpn16v1/monitor.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/monitor.c
+++ hpnssh-8.8p1_hpn16v1/monitor.c
@@ -397,7 +397,7 @@ monitor_child_preauth(struct ssh *ssh, s
 	mm_get_keystate(ssh, pmonitor);
 
 	/* Drain any buffered messages from the child */
-	while (pmonitor->m_log_recvfd != -1 && monitor_read_log(pmonitor) == 0)
+	while (pmonitor->m_log_recvfd >= 0 && monitor_read_log(pmonitor) == 0)
 		;
 
 	if (pmonitor->m_recvfd >= 0)
@@ -1670,7 +1670,7 @@ mm_answer_pty(struct ssh *ssh, int sock,
 	s->ptymaster = s->ptyfd;
 
 	debug3_f("tty %s ptyfd %d", s->tty, s->ttyfd);
-
+	/* coverity[leaked_handle : FALSE] */
 	return (0);
 
  error:
Index: hpnssh-8.8p1_hpn16v1/monitor_wrap.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/monitor_wrap.c
+++ hpnssh-8.8p1_hpn16v1/monitor_wrap.c
@@ -612,10 +612,10 @@ mm_pty_allocate(int *ptyfd, int *ttyfd,
 	if ((tmp1 = dup(pmonitor->m_recvfd)) == -1 ||
 	    (tmp2 = dup(pmonitor->m_recvfd)) == -1) {
 		error_f("cannot allocate fds for pty");
-		if (tmp1 > 0)
+		if (tmp1 >= 0)
 			close(tmp1);
-		if (tmp2 > 0)
-			close(tmp2);
+		/*DEAD CODE if (tmp2 >= 0)
+			close(tmp2);*/
 		return 0;
 	}
 	close(tmp1);
Index: hpnssh-8.8p1_hpn16v1/openbsd-compat/bindresvport.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/openbsd-compat/bindresvport.c
+++ hpnssh-8.8p1_hpn16v1/openbsd-compat/bindresvport.c
@@ -58,7 +58,7 @@ bindresvport_sa(int sd, struct sockaddr
 	struct sockaddr_in6 *in6;
 	u_int16_t *portp;
 	u_int16_t port;
-	socklen_t salen;
+	socklen_t salen = sizeof(struct sockaddr_storage);
 	int i;
 
 	if (sa == NULL) {
Index: hpnssh-8.8p1_hpn16v1/scp.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/scp.c
+++ hpnssh-8.8p1_hpn16v1/scp.c
@@ -198,11 +198,11 @@ killchild(int signo)
 {
 	if (do_cmd_pid > 1) {
 		kill(do_cmd_pid, signo ? signo : SIGTERM);
-		waitpid(do_cmd_pid, NULL, 0);
+		(void) waitpid(do_cmd_pid, NULL, 0);
 	}
 	if (do_cmd_pid2 > 1) {
 		kill(do_cmd_pid2, signo ? signo : SIGTERM);
-		waitpid(do_cmd_pid2, NULL, 0);
+		(void) waitpid(do_cmd_pid2, NULL, 0);
 	}
 
 	if (signo)
Index: hpnssh-8.8p1_hpn16v1/servconf.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/servconf.c
+++ hpnssh-8.8p1_hpn16v1/servconf.c
@@ -2168,8 +2168,9 @@ process_server_config_line_depth(ServerO
 		if (*activep && *charptr == NULL) {
 			*charptr = tilde_expand_filename(arg, getuid());
 			/* increase optional counter */
-			if (intptr != NULL)
-				*intptr = *intptr + 1;
+			/* DEAD CODE intptr is still NULL ;)
+  			 if (intptr != NULL)
+				*intptr = *intptr + 1; */
 		}
 		break;
 
Index: hpnssh-8.8p1_hpn16v1/serverloop.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/serverloop.c
+++ hpnssh-8.8p1_hpn16v1/serverloop.c
@@ -558,7 +558,7 @@ server_request_tun(struct ssh *ssh)
 		debug_f("invalid tun");
 		goto done;
 	}
-	if (auth_opts->force_tun_device != -1) {
+	if (auth_opts->force_tun_device >= 0) {
 		if (tun != SSH_TUNID_ANY &&
 		    auth_opts->force_tun_device != (int)tun)
 			goto done;
Index: hpnssh-8.8p1_hpn16v1/session.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/session.c
+++ hpnssh-8.8p1_hpn16v1/session.c
@@ -1225,12 +1225,14 @@ do_setup_env(struct ssh *ssh, Session *s
 	/* Environment specified by admin */
 	for (i = 0; i < options.num_setenv; i++) {
 		cp = xstrdup(options.setenv[i]);
+		/* coverity[overwrite_var : FALSE] */
 		if ((value = strchr(cp, '=')) == NULL) {
 			/* shouldn't happen; vars are checked in servconf.c */
 			fatal("Invalid config SetEnv: %s", options.setenv[i]);
 		}
 		*value++ = '\0';
 		child_set_env(&env, &envsize, cp, value);
+		free(cp);
 	}
 
 	/* SSH_CLIENT deprecated */
Index: hpnssh-8.8p1_hpn16v1/sftp.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/sftp.c
+++ hpnssh-8.8p1_hpn16v1/sftp.c
@@ -222,7 +222,7 @@ killchild(int signo)
 	pid = sshpid;
 	if (pid > 1) {
 		kill(pid, SIGTERM);
-		waitpid(pid, NULL, 0);
+		(void) waitpid(pid, NULL, 0);
 	}
 
 	_exit(1);
@@ -768,6 +768,8 @@ process_put(struct sftp_conn *conn, cons
 			    fflag || global_fflag) == -1)
 				err = -1;
 		}
+		free(abs_dst);
+		abs_dst = NULL;
 	}
 
 out:
@@ -991,6 +993,7 @@ do_globbed_ls(struct sftp_conn *conn, co
 		if (lflag & LS_LONG_VIEW) {
 			if (g.gl_statv[i] == NULL) {
 				error("no stat information for %s", fname);
+				free(fname);
 				continue;
 			}
 			lname = ls_file(fname, g.gl_statv[i], 1,
Index: hpnssh-8.8p1_hpn16v1/sk-usbhid.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/sk-usbhid.c
+++ hpnssh-8.8p1_hpn16v1/sk-usbhid.c
@@ -1261,6 +1261,7 @@ sk_load_resident_keys(const char *pin, s
 		freezero(rks[i], sizeof(*rks[i]));
 	}
 	free(rks);
+	free(device);
 	return ret;
 }
 
Index: hpnssh-8.8p1_hpn16v1/ssh-agent.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/ssh-agent.c
+++ hpnssh-8.8p1_hpn16v1/ssh-agent.c
@@ -869,6 +869,7 @@ sanitize_pkcs11_provider(const char *pro
 
 		if (pkcs11_uri_parse(provider, uri) != 0) {
 			error("Failed to parse PKCS#11 URI");
+			pkcs11_uri_cleanup(uri);
 			return NULL;
 		}
 		/* validate also provider from URI */
@@ -1449,8 +1450,8 @@ main(int ac, char **av)
 	sanitise_stdfd();
 
 	/* drop */
-	setegid(getgid());
-	setgid(getgid());
+	(void) setegid(getgid());
+	(void) setgid(getgid());
 
 	platform_disable_tracing(0);	/* strict=no */
 
Index: hpnssh-8.8p1_hpn16v1/ssh-keygen.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/ssh-keygen.c
+++ hpnssh-8.8p1_hpn16v1/ssh-keygen.c
@@ -2332,6 +2332,9 @@ update_krl_from_file(struct passwd *pw,
 			r = ssh_krl_revoke_key_sha256(krl, blob, blen);
 			if (r != 0)
 				fatal_fr(r, "revoke key failed");
+			freezero(blob, blen);
+			blob = NULL;
+			blen = 0;
 		} else {
 			if (strncasecmp(cp, "key:", 4) == 0) {
 				cp += 4;
@@ -2936,6 +2939,7 @@ do_moduli_screen(const char *out_file, c
 		} else if (strncmp(opts[i], "start-line=", 11) == 0) {
 			start_lineno = strtoul(opts[i]+11, NULL, 10);
 		} else if (strncmp(opts[i], "checkpoint=", 11) == 0) {
+			free(checkpoint);
 			checkpoint = xstrdup(opts[i]+11);
 		} else if (strncmp(opts[i], "generator=", 10) == 0) {
 			generator_wanted = (u_int32_t)strtonum(
@@ -2977,6 +2981,9 @@ do_moduli_screen(const char *out_file, c
 #else /* WITH_OPENSSL */
 	fatal("Moduli screening is not supported");
 #endif /* WITH_OPENSSL */
+	free(checkpoint);
+	if (in != stdin)
+		fclose(in);
 }
 
 static char *
Index: hpnssh-8.8p1_hpn16v1/ssh.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/ssh.c
+++ hpnssh-8.8p1_hpn16v1/ssh.c
@@ -1742,6 +1742,7 @@ control_persist_detach(void)
 		close(muxserver_sock);
 		muxserver_sock = -1;
 		options.control_master = SSHCTL_MASTER_NO;
+		/* coverity[leaked_handle: FALSE]*/
 		muxclient(options.control_path);
 		/* muxclient() doesn't return on success. */
 		fatal("Failed to connect to new control master");
Index: hpnssh-8.8p1_hpn16v1/sshd.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/sshd.c
+++ hpnssh-8.8p1_hpn16v1/sshd.c
@@ -599,8 +599,10 @@ privsep_preauth(struct ssh *ssh)
 
 		privsep_preauth_child(ssh);
 		setproctitle("%s", "[net]");
-		if (box != NULL)
+		if (box != NULL) {
 			ssh_sandbox_child(box);
+			free(box);
+		}
 
 		return 0;
 	}
@@ -1471,6 +1473,9 @@ server_accept_loop(struct ssh *ssh, int
 			explicit_bzero(rnd, sizeof(rnd));
 		}
 	}
+
+	if (fdset != NULL)
+		free(fdset);
 }
 
 /*
@@ -2545,7 +2550,7 @@ do_ssh2_kex(struct ssh *ssh)
 	if (options.rekey_limit || options.rekey_interval)
 		ssh_packet_set_rekey_limits(ssh, options.rekey_limit,
 		    options.rekey_interval);
-
+	/* coverity[leaked_storage : FALSE]*/
 	myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal(
 	    ssh, list_hostkey_types());
 
@@ -2590,8 +2595,11 @@ do_ssh2_kex(struct ssh *ssh)
 
 	if (newstr)
 		myproposal[PROPOSAL_KEX_ALGS] = newstr;
-	else
+	else {
 		fatal("No supported key exchange algorithms");
+		free(gss);
+	     }
+	     /* coverity[leaked_storage: FALSE]*/
 	}
 #endif
 
Index: hpnssh-8.8p1_hpn16v1/sshsig.c
===================================================================
--- hpnssh-8.8p1_hpn16v1.orig/sshsig.c
+++ hpnssh-8.8p1_hpn16v1/sshsig.c
@@ -515,6 +515,7 @@ hash_file(int fd, const char *hashalg, s
 			oerrno = errno;
 			error_f("read: %s", strerror(errno));
 			ssh_digest_free(ctx);
+			ctx = NULL;
 			errno = oerrno;
 			r = SSH_ERR_SYSTEM_ERROR;
 			goto out;
